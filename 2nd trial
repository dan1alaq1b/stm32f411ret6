/*2nd trial*/

#include "main.h"

uint8_t mode = 0;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
  // USER CODE BEGIN 1 //USER CODE END 1 //MCU Configuration

  SystemClock_Config();

  MX_GPIO_Init();

  while (1)
  {
    
  }

}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|E_Pin|F_Pin
                          |G_Pin|C_Pin|D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_A_Pin Button_B_Pin */
  GPIO_InitStruct.Pin = Button_A_Pin|Button_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : A_Pin B_Pin E_Pin F_Pin
                           G_Pin C_Pin D_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|E_Pin|F_Pin
                          |G_Pin|C_Pin|D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  	  if(GPIO_Pin == GPIO_PIN_13){
			counter=counter+1;

			if(counter>9){
				counter=0;
			}

	}
		if(GPIO_Pin==GPIO_PIN_0){
			counter=counter-1;

			if(counter<0){
				counter=9;
			}
		}
	/*}*/

/*				== 0){
  		  //Display number 0:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);//d
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);//e
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);//f
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);//g

  		  HAL_Delay(1000);
  	  }
  	  if(mode == 1){
  	  		  //Display number 1:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);//g

  	  		  HAL_Delay(1000);
  	  }
  	  if(mode == 2){
  	  		  //Display number 2:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);//g

  	  		  HAL_Delay(1000);
  	  }
  	  if(mode == 3){
  	  		  //Display number 0:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);//g

  	  		  HAL_Delay(1000);
  	  	  }
  	  if(mode == 4){
  	  		  //Display number 0:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);//g

  	  		  HAL_Delay(1000);
  	  	  }
  	  if(mode == 5){
  	  		  //Display number 0:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);//g

  	  		  HAL_Delay(1000);
  	  	  }
  	  if(mode == 6){
  	  		  //Display number 0:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);//g

  	  		  HAL_Delay(1000);
  	  	  }
  	  if(mode == 7){
  	  		  //Display number 0:
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);//d
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);//e
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);//f
  	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);//g

  	  		  HAL_Delay(1000);
  	  	  }
  	  if(mode == 8){
  	  		  //Display number 8:
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);//a
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);//b
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);//c
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);//d
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);//e
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);//f
  		  	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);//g

  	  		  HAL_Delay(1000);
  	  	  }*/
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{
  
}
#endif /* USE_FULL_ASSERT */
